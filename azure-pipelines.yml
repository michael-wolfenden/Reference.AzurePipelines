# ========================================================================
# Perform linux, macos and windows builds in parallel and then trigger a release build on success
#
# NOTE: you must have the following variables set in your pipeline as secret variables
# GITHUB_TOKEN
# NUGET_TOKEN
#
# For details, see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#secret-variables
# ========================================================================

# Only trigger CI builds for the master branch, instead of on other branches or tags.
# You'll automatically be configured to build PRs
# For details, see https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers
trigger:
  branches:
    include:
      - master
    exclude:
      - tags/*
      - refs/tags/*

jobs:

# ===========================================================================================
# GetNextVersionNumber
# ===========================================================================================
# Run semantic-release in dry run mode, extract the next release version number and set the
# nextVersionNumber variable for the following jobs to use.

# NOTE: if semantic-release doesn't detect any changes requiring a release, the version will
# be set to 0.0.0
# ===========================================================================================
- job: GetNextVersionNumber
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - bash: |
      set -Eeuo pipefail

      semanticReleaseOutput=$(npx \
          --quiet \
          -p semantic-release@17.0.8 \
          -p @semantic-release/changelog@5.0.1 \
          -p @semantic-release/git@9.0.0 \
          -p @semantic-release/exec@5.0.0 \
          semantic-release --dry-run)

      nextVersion=$(echo "$semanticReleaseOutput" \
        | sed -n 's/.* The next release version is \(.*\)$/\1/gip')

      echo "$semanticReleaseOutput"

      if [ -z "$nextVersion" ]
      then
          echo "##vso[task.setvariable variable=nextVersionNumber;isOutput=true]0.0.0"
      else
          echo "The next release version is ${nextVersion}"
          echo "##vso[task.setvariable variable=nextVersionNumber;isOutput=true]$nextVersion"
      fi
    displayName: Run semantic release to get next version number
    name: SetNextVersionNumberVariable
    # Need to explicitly re-map these secret variables so they are decrypted
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
      NUGET_TOKEN: $(NUGET_TOKEN)

# ===========================================================================================
# Build
# ===========================================================================================
# Run the linux, macOS and windows builds
# ===========================================================================================
- job: Build
  dependsOn: GetNextVersionNumber

  strategy:
    maxParallel: 3
    matrix:
      Linux:
        imageName: 'ubuntu-latest'
        name: 'ubuntu'
      macOS:
        imageName: 'macOS-latest'
        name: 'macOS'
      Windows:
        imageName: 'windows-latest'
        name: 'windows'

  pool:
    vmImage: $(imageName)

  variables:
    nextVersionNumber: $[ dependencies.GetNextVersionNumber.outputs['SetNextVersionNumberVariable.nextVersionNumber'] ]

  steps:
  # Install .NET Core 3.0
  - task: UseDotNet@2
    displayName: 'Use dotnet sdk 3.x'
    inputs:
      version: 3.x

  # Build and run tests via Cake.
  # The produced nuget package and test results will be output to the artifacts folder
  - script: |
      dotnet tool restore
      dotnet cake --versionNumber=$(nextVersionNumber)
    displayName: 'Cake üç∞ - Build & Test'
    env:
      # Don‚Äôt send any telemetry data.
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      # This will prevent the CLI from pre-populating the packages cache.
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

  # Publish the test results produced by the build so they are visible in the tests tab
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: '$(name) Test Run'

  # Store the built nuget and symbol package so they can be downloaded by the 'Release' job
  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts'
    inputs:
      pathtoPublish: './artifacts'
      artifactName: '$(name)-artifacts'

# ===========================================================================================
# Release
# ===========================================================================================
# Run semantic-release to trigger a release (Publish to nuget, create a release on github,
# update the CHANGELOG) BUT only if semantic-release detects any changes since the last release
# ===========================================================================================
- job: Release
  dependsOn: Build

  pool:
    vmImage: 'ubuntu-latest'

  steps:
    # Download the stored nuget and symbol package
    - task: DownloadBuildArtifacts@0
      displayName: 'Download artifacts'
      inputs:
        artifactName: 'ubuntu-artifacts'
        buildType: 'current'
        downloadType: 'single'
        downloadPath: './'

    # Run semantic-release to trigger a release
    - bash: |
        set -Eeuo pipefail

        npx --quiet \
            -p semantic-release@17.0.8 \
            -p @semantic-release/changelog@5.0.1 \
            -p @semantic-release/git@9.0.0 \
            -p @semantic-release/exec@5.0.0 \
            semantic-release
      displayName: Run semantic release to release if relevant changes
      # Need to explicitly re-map these secret variables so they are decrypted
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)
        NUGET_TOKEN: $(NUGET_TOKEN)
